
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Utility functions to make rules more readable.
    function isStaffingAdmin() {
      return request.auth.token.email == resource.data.staffing_admin_email;
    }
    function isHrAdmin() {
      return request.auth.token.email == resource.data.hr_admin_email;
    }
    function isOwner() {
      return request.auth.token.email == resource.data.owner_email;
    }
    function isAnyAdmin() {
      return isStaffingAdmin() || isHrAdmin() || isOwner();
    }
    function isAnonymousUser() {
      return request.auth.provider == 'anonymous';
    }
    function isActiveCaregiver() {
      let isCaregiver = exists(/databases/$(database)/documents/caregivers_active/$(request.auth.uid));
      let isActive = get(/databases/$(database)/documents/caregivers_active/$(request.auth.uid)).data.status == 'ACTIVE';
      return isCaregiver && isActive;
    }
    function isClientUser() {
      // A client user is identified by the presence of a 'clientId' claim.
      return request.auth.token.clientId != null;
    }
    
    // Global settings, only readable by admins.
    match /settings/{settingId} {
      allow read: if isAnyAdmin();
      allow write: if isHrAdmin(); // Only HR Admin can change availability.
    }
    
    // Email documents for the 'firestore-send-email' extension.
    match /mail/{docId} {
        allow create; // Allow anyone to queue an email.
    }

    // Caregiver application profiles.
    match /caregiver_profiles/{caregiverProfileId} {
      // An anonymous user can create their own profile.
      allow create: if isAnonymousUser() && request.resource.data.uid == request.auth.uid;
      
      // Admins can read, update, and delete any profile.
      allow read, update, delete: if isAnyAdmin();
    }
    
    // Appointments for interviews.
    match /appointments/{appointmentId} {
        // An anonymous user can create their own appointment.
        allow create: if isAnonymousUser() && request.resource.data.caregiverId == request.resource.data.caregiverId;
        
        // Admins can manage all appointments.
        allow read, write, delete: if isHrAdmin();
    }
    
    // Interview records.
    match /interviews/{interviewId} {
      allow read, write: if isAnyAdmin();
    }

    // Hired employee records.
    match /caregiver_employees/{employeeId} {
      allow read, write: if isAnyAdmin();
    }

    // Active caregiver records (synced from external system).
    match /caregivers_active/{caregiverId} {
      allow read: if isAnyAdmin() || isActiveCaregiver();
      allow write: if isAnyAdmin(); // Only admins can modify this collection.
    }

    // Client records (synced from external system).
    match /Clients/{clientId} {
      allow read, write: if isAnyAdmin();
    }

    // Groups linking clients and caregivers.
    match /carelog_groups/{groupId} {
        allow read: if isAnyAdmin() || isActiveCaregiver() || isClientUser();
        allow write: if isStaffingAdmin();
    }
    
    // Individual care log entries.
    match /carelogs/{logId} {
      // An active caregiver can create a log for a group they are part of.
      allow create: if isActiveCaregiver() && 
                      request.auth.token.email in get(/databases/$(database)/documents/carelog_groups/$(request.resource.data.careLogGroupId)).data.caregiverEmails;
                      
      // A client can read logs for their group IF client access is enabled for that group.
      allow read: if (isClientUser() && 
                     request.auth.token.clientId == get(/databases/$(database)/documents/carelog_groups/$(resource.data.careLogGroupId)).data.clientId &&
                     get(/databases/$(database)/documents/carelog_groups/$(resource.data.careLogGroupId)).data.clientAccessEnabled == true) ||
                    (isActiveCaregiver() && request.auth.token.email in get(/databases/$(database)/documents/carelog_groups/$(resource.data.careLogGroupId)).data.caregiverEmails) ||
                    isStaffingAdmin();
    }

    // Templates for structured care logs.
    match /carelog_templates/{templateId} {
        allow read: if isStaffingAdmin() || isActiveCaregiver();
        allow write: if isStaffingAdmin();
    }
    
    // Requests from clients for additional care.
    match /client_additional_care_requests/{requestId} {
        // A client user can create their own request.
        allow create: if isClientUser() && request.resource.data.clientId == request.auth.token.clientId;
        
        // Staffing admin can read and update all requests.
        allow read, update: if isStaffingAdmin();
    }
    
    // Client intake and signing process documents.
     match /client_signups/{signupId} {
      allow read, create, update: if isAnyAdmin() || request.auth.token.email == resource.data.formData.clientEmail;
      allow delete: if isAnyAdmin();
    }
  }
}
