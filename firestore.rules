/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, restricting access unless explicitly allowed.
 * It focuses on authorization (who can do what) and relaxes data validation (schema enforcement) for rapid prototyping.
 *
 * Data Structure:
 * - /caregiver_profiles/{caregiverProfileId}: Stores caregiver profile information. Access should be restricted initially and opened cautiously.
 * - /appointments/{appointmentId}: Stores appointment slots for interviews.
 *
 * Key Security Decisions:
 * - Caregiver profiles are not publicly listable.
 * - Unauthenticated access is denied unless explicitly permitted.
 *
 * Denormalization for Authorization:
 *   None used currently. If authorization needs depend on relationships or roles, consider denormalizing relevant data
 *   onto the documents themselves to avoid costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to caregiver profiles. Listing is denied to all users, including authenticated ones, due to privacy concerns.
     * @path /caregiver_profiles/{caregiverProfileId}
     * @allow (create) An authenticated user can create a profile if they are the owner.
     * @deny (list) No one can list caregiver profiles.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @principle Enforces document ownership for writes and restricts listing for privacy.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to appointment slots.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Any authenticated user can view appointment slots.
     * @allow (create) Any authenticated user can create appointment slots.
     * @deny (create) An unauthenticated user cannot create appointment slots.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /appointments/{appointmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}