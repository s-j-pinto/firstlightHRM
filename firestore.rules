/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict owner-only access model for caregiver profiles and a public read, owner-write model for the other collections.
 *
 * Data Structure:
 * - /caregiver_profiles/{caregiverProfileId}: Stores detailed caregiver profiles. Access is restricted to the profile owner.
 * - /appointments/{appointmentId}: Stores appointment slots. Read access is public, but write access is restricted.
 * - /interviews/{interviewId}: Stores interview details. Read access is public, but write access is restricted.
 * - /caregiver_employees/{employeeId}: Stores caregiver employment information. Read access is public, but write access is restricted.
 *
 * Key Security Decisions:
 * - User listing is disallowed for caregiver profiles to protect privacy.
 * - Other collections are readable by all users, including unauthenticated users.
 * - Write access to these collections is restricted to authenticated users only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures caregiver profiles, allowing only the profile owner to read and write.
     * @path /databases/{database}/documents/caregiver_profiles/{caregiverProfileId}
     * @allow (read, write) if the user is the owner of the profile (e.g., request.auth.uid == caregiverProfileId).
     * @deny (read, write) if the user is not the owner of the profile (e.g., request.auth.uid != caregiverProfileId).
     * @principle Enforces document ownership for all operations.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if isOwner(caregiverProfileId);
      allow list: if false;
      allow create: if isOwner(caregiverProfileId);
      allow update: if isExistingOwner(caregiverProfileId);
      allow delete: if isExistingOwner(caregiverProfileId);
    }

    /**
     * @description Allows public read access to appointments, but restricts write access to authenticated users.
     * @path /databases/{database}/documents/appointments/{appointmentId}
     * @allow (read) any user (e.g., allow get, list: if true;).
     * @allow (write) only authenticated users who provide a valid appointment.
     * @deny (write) unauthenticated users (e.g., request.auth == null).
     * @principle Allows public reads with owner-only writes for appointments.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to interviews, but restricts write access to authenticated users.
     * @path /databases/{database}/documents/interviews/{interviewId}
     * @allow (read) any user (e.g., allow get, list: if true;).
     * @allow (write) only authenticated users who provide a valid interview.
     * @deny (write) unauthenticated users (e.g., request.auth == null).
     * @principle Allows public reads with owner-only writes for interviews.
     */
    match /interviews/{interviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to caregiver employees, but restricts write access to authenticated users.
     * @path /databases/{database}/documents/caregiver_employees/{employeeId}
     * @allow (read) any user (e.g., allow get, list: if true;).
     * @allow (write) only authenticated users who provide a valid caregiver employee record.
     * @deny (write) unauthenticated users (e.g., request.auth == null).
     * @principle Allows public reads with owner-only writes for caregiver employees.
     */
    match /caregiver_employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}