/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based security model.
 *
 * Data Structure:
 * - /caregiver_profiles/{caregiverProfileId}: Caregiver profiles, accessible only to authenticated users.
 * - /appointments/{appointmentId}: Appointment slots, accessible only to authenticated users.
 * - /interviews/{interviewId}: Interview details, accessible only to authenticated users.
 *
 * Key Security Decisions:
 * - Authenticated users can create, read, update and delete documents in the `caregiver_profiles`, `appointments`, and `interviews` collections.
 * - No public listing of documents is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the caregiverProfileId.
     */
    function isCaregiverProfileOwner(caregiverProfileId) {
      return isSignedIn() && request.auth.uid == caregiverProfileId;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the caregiverUid.
     */
    function isCaregiverUidOwner(caregiverUid) {
      return isSignedIn() && request.auth.uid == caregiverUid;
    }

    /**
     * @description Enforce existence of the document being updated or deleted.
     */
    function isExisting() {
      return existsAfter(resource.data);
    }
    
    /**
     * @description Rules for the /caregiver_profiles collection.
     * @path /caregiver_profiles/{caregiverProfileId}
     * @allow (create) User with UID matching caregiverProfileId can create a profile.
     * @deny (create) User attempts to create a profile with a caregiverProfileId that doesn't match their UID.
     * @allow (get) Authenticated user can read a caregiver profile.
     * @deny (get) Unauthenticated user tries to read a caregiver profile.
     * @allow (update) User with UID matching caregiverProfileId can update their own profile.
     * @deny (update) User attempts to update a profile with a caregiverProfileId that doesn't match their UID.
     * @allow (delete) User with UID matching caregiverProfileId can delete their own profile.
     * @deny (delete) User attempts to delete a profile with a caregiverProfileId that doesn't match their UID.
     * @principle Enforces document ownership for writes and requires authentication for reads.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == caregiverProfileId;
      allow update: if isSignedIn() && request.auth.uid == caregiverProfileId && isExisting();
      allow delete: if isSignedIn() && request.auth.uid == caregiverProfileId && isExisting();
    }

    /**
     * @description Rules for the /appointments collection.
     * @path /appointments/{appointmentId}
     * @allow (create) Authenticated user can create an appointment.
     * @deny (create) Unauthenticated user tries to create an appointment.
     * @allow (get) Authenticated user can read an appointment.
     * @deny (get) Unauthenticated user tries to read an appointment.
     * @allow (update) Authenticated user can update an appointment.
     * @deny (update) Unauthenticated user tries to update an appointment.
     * @allow (delete) Authenticated user can delete an appointment.
     * @deny (delete) Unauthenticated user tries to delete an appointment.
     */
    match /appointments/{appointmentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExisting();
      allow delete: if isSignedIn() && isExisting();
    }

    /**
     * @description Rules for the /interviews collection.
     * @path /interviews/{interviewId}
     * @allow (create) Authenticated user can create an interview.
     * @deny (create) Unauthenticated user tries to create an interview.
     * @allow (get) Authenticated user can read an interview.
     * @deny (get) Unauthenticated user tries to read an interview.
     * @allow (update) Authenticated user can update an interview.
     * @deny (update) Unauthenticated user tries to update an interview.
     * @allow (delete) Authenticated user can delete an interview.
     * @deny (delete) Unauthenticated user tries to delete an interview.
     */
    match /interviews/{interviewId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExisting();
      allow delete: if isSignedIn() && isExisting();
    }
  }
}