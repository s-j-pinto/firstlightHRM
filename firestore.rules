/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security while enabling rapid prototyping. It uses an owner-based access control model where possible, restricting data access to the owning user.
 *
 * Data Structure:
 * The database contains collections for caregiver profiles, appointments, interviews, caregiver employment details, active caregivers, clients, carelog groups and carelogs.
 *
 * Key Security Decisions:
 * - All write operations are protected by authorization checks based on authenticated user IDs.
 * - List operations are generally restricted to the owning user, unless the data is explicitly intended to be public.
 * - Data validation is minimal, focusing on relational integrity and ownership to facilitate prototyping.
 *
 * Denormalization for Authorization:
 * To simplify and optimize security rules, the following denormalization strategies are employed:
 *   - User-specific data (e.g., caregiver profiles) includes the user's UID as a field within the document itself.
 *   - Relationships between documents (e.g., care logs and care log groups) are enforced by requiring matching IDs.
 *
 * Structural Segregation:
 * This design does not implement structural segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to caregiver profiles. Caregivers can only read and write their own profiles.
     * @path /caregiver_profiles/{caregiverProfileId}
     * @allow (create) - Authenticated user creates their own profile with matching ID.
     * @allow (update, delete) - Authenticated user updates/deletes their own profile with matching ID.
     * @allow (get, list) - Authenticated user retrieves their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(caregiverProfileId);
      allow delete: if isExistingOwner(caregiverProfileId);
    }

    /**
     * @description Controls access to appointment slots. Open for all.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Any user can view available appointment slots.
     * @allow (create) - Any authenticated user can create an appointment slot.
     * @deny (update, delete) - No user can update or delete an appointment slot.
     * @principle Open read access.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

       /**
     * @description Controls access to interviews. Open for all.
     * @path /interviews/{interviewId}
     * @allow (get, list) - Any user can view interview details.
     * @allow (create) - Any authenticated user can create an interview record.
     * @deny (update, delete) - No user can update or delete an interview record.
     * @principle Open read access.
     */
    match /interviews/{interviewId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }


    /**
     * @description Controls access to caregiver employee records. Open for all.
     * @path /caregiver_employees/{employeeId}
     * @allow (get, list) - Any user can view employee records.
     * @allow (create) - Any authenticated user can create an employee record.
     * @deny (update, delete) - No user can update or delete an employee record.
     * @principle Open read access.
     */
    match /caregiver_employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to active caregiver data. Open for all.
     * @path /caregivers_active/{caregiverId}
     * @allow (get, list) - Any user can view active caregiver information.
     * @allow (create) - Any authenticated user can create an active caregiver record.
     * @deny (update, delete) - No user can update or delete an active caregiver record.
     * @principle Open read access.
     */
    match /caregivers_active/{caregiverId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to client data. Open for all.
     * @path /Clients/{clientId}
     * @allow (get, list) - Any user can view client information.
     * @allow (create) - Any authenticated user can create a client record.
     * @deny (update, delete) - No user can update or delete a client record.
     * @principle Open read access.
     */
    match /Clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to care log groups. Open for all.
     * @path /carelog_groups/{groupId}
     * @allow (get, list) - Any user can view care log groups.
     * @allow (create) - Any authenticated user can create a care log group.
     * @deny (update, delete) - No user can update or delete a care log group.
     * @principle Open read access.
     */
    match /carelog_groups/{groupId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to care logs. Open for all.
     * @path /carelogs/{logId}
     * @allow (get, list) - Any user can view care logs.
     * @allow (create) - Any authenticated user can create a care log.
     * @deny (update, delete) - No user can update or delete a care log.
     * @principle Open read access.
     */
    match /carelogs/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
    /**
     * @description Controls access to client_additional_care_requests. Open for all.
     * @path /client_additional_care_requests/{requestId}
     * @allow (get, list) - Any user can view care logs.
     * @allow (create) - Any authenticated user can create a care log.
     * @deny (update, delete) - No user can update or delete a care log.
     * @principle Open read access.
     */
    match /client_additional_care_requests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  /**
     * @description Controls access to carelog_templates. Open for all.
     * @path /carelog_templates/{templateId}
     * @allow (get, list) - Any user can view care logs.
     * @allow (create) - Any authenticated user can create a carelog_templates.
     * @deny (update, delete) - No user can update or delete a carelog_templates.
     * @principle Open read access.
     */
    match /carelog_templates/{templateId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}