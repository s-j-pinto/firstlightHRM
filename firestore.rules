/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict access control model for caregiver data.
 *
 * Data Structure:
 * - /caregiver_profiles/{caregiverProfileId}: Stores detailed caregiver profiles.
 * - /appointments/{appointmentId}: Stores appointment slots for caregiver interviews.
 * - /interviews/{interviewId}: Stores data related to caregiver interviews.
 * - /caregiver_employees/{employeeId}: Stores data for hired caregivers.
 *
 * Key Security Decisions:
 * - Caregiver profiles can only be created, updated, or deleted by an authenticated user.
 * - Appointments and interviews can only be managed by authenticated users.
 * - Employee records can only be created, updated, or deleted by authenticated users.
 * - Listing is generally disallowed to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 *   There are no specific denormalization strategies employed in this initial ruleset.
 *   Consider adding `ownerId` fields to documents if more granular access control is needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to caregiver profiles.
     * @path /caregiver_profiles/{caregiverProfileId}
     * @allow (create) Authenticated user creates a profile for themself.
     * @deny (create) Unauthenticated user attempts to create a profile.
     * @allow (get) Authenticated user attempts to read the profile.
     * @deny (update) Unauthenticated user attempts to update a profile.
     * @principle Enforces document ownership for writes.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to appointment slots.
     * @path /appointments/{appointmentId}
     * @allow (create) Authenticated user creates an appointment.
     * @deny (create) Unauthenticated user attempts to create an appointment.
     * @allow (get) Authenticated user attempts to read an appointment.
     * @deny (update) Unauthenticated user attempts to update an appointment.
     * @principle Requires authentication for all operations.
     */
    match /appointments/{appointmentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Controls access to caregiver interview records.
      * @path /interviews/{interviewId}
      * @allow (create) Authenticated user creates an interview record.
      * @deny (create) Unauthenticated user attempts to create an interview record.
      * @allow (get) Authenticated user attempts to read an interview record.
      * @deny (update) Unauthenticated user attempts to update an interview record.
      * @principle Requires authentication for all operations.
      */
    match /interviews/{interviewId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to caregiver employee records.
     * @path /caregiver_employees/{employeeId}
     * @allow (create) Authenticated user creates an employee record.
     * @deny (create) Unauthenticated user attempts to create an employee record.
     * @allow (get) Authenticated user attempts to read an employee record.
     * @deny (update) Unauthenticated user attempts to update an employee record.
     * @principle Requires authentication for all operations.
     */
    match /caregiver_employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // --- Helper Functions ---
    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}