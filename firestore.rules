/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It is designed for a rapid prototyping phase, so data validation is intentionally relaxed, focusing on authorization.
 *
 * Data Structure:
 * - /caregiver_profiles/{caregiverProfileId}: Stores detailed caregiver profiles. Access is restricted to the owner (the caregiver).
 * - /appointments/{appointmentId}: Stores appointment slots. No authentication is required to view appointment slots.
 *
 * Key Security Decisions:
 * - Caregiver profiles are private and accessible only to the authenticated user matching the profile ID.
 * - Listing of caregiver profiles is denied to prevent unauthorized data access.
 * - Appointments are publicly readable.
 *
 * Denormalization for Authorization:
 *  N/A (No denormalization needed in this phase).
 * Structural Segregation:
 *  N/A (No structural segregation in this phase).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(caregiverProfileId) {
      return request.auth.uid == caregiverProfileId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(caregiverProfileId) {
      return isOwner(caregiverProfileId) && exists(resource.data);
    }

    /**
     * @description Security rules for caregiver profiles.
     * @path /caregiver_profiles/{caregiverProfileId}
     * @allow (create) Authenticated user creates their own profile.
     * @allow (get, update, delete) Authenticated user with matching UID can access their profile.
     * @deny (create) If the authenticated user's UID does not match the caregiverProfileId.
     * @deny (get, update, delete) If the authenticated user's UID does not match the caregiverProfileId.
     * @principle Enforces document ownership for writes.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if isOwner(caregiverProfileId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == caregiverProfileId;
      allow update: if isExistingOwner(caregiverProfileId);
      allow delete: if isExistingOwner(caregiverProfileId);
    }

    /**
     * @description Security rules for appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Allow all users to view appointments.
     * @deny (create, update, delete) Not permitted in this phase, as only admins should manage the availability slots
     * @principle Public read, owner-only write (not implemented in this phase)
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}