/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict security model where only authenticated users can access data.
 *   It focuses on securing caregiver profiles, appointments, interviews, and caregiver employee data.
 *
 * Data Structure:
 * - /caregiver_profiles/{caregiverProfileId}: Stores caregiver profile information.
 * - /appointments/{appointmentId}: Stores appointment slots for interviews.
 * - /interviews/{interviewId}: Stores interview details.
 * - /caregiver_employees/{employeeId}: Stores caregiver employee data.
 *
 * Key Security Decisions:
 * - All write operations are restricted to authenticated users.
 * - No user-generated content is publicly readable (no `allow get, list: if true`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to caregiver profiles. Only authenticated users can create, update, or delete profiles.
     * @path /caregiver_profiles/{caregiverProfileId}
     * @allow (create) Authenticated user creates a caregiver profile.
     * @deny (create) Unauthenticated user attempts to create a caregiver profile.
     * @allow (update) Authenticated user updates a caregiver profile.
     * @deny (update) Unauthenticated user attempts to update a caregiver profile.
     * @allow (delete) Authenticated user deletes a caregiver profile.
     * @deny (delete) Unauthenticated user attempts to delete a caregiver profile.
     * @principle Enforces authentication for all write operations.
     */
    match /caregiver_profiles/{caregiverProfileId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to appointment slots. Only authenticated users can create, update, or delete appointments.
     * @path /appointments/{appointmentId}
     * @allow (create) Authenticated user creates an appointment.
     * @deny (create) Unauthenticated user attempts to create an appointment.
     * @allow (update) Authenticated user updates an appointment.
     * @deny (update) Unauthenticated user attempts to update an appointment.
     * @allow (delete) Authenticated user deletes an appointment.
     * @deny (delete) Unauthenticated user attempts to delete an appointment.
     * @principle Enforces authentication for all write operations.
     */
    match /appointments/{appointmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to interview records. Only authenticated users can create, update, or delete interviews.
     * @path /interviews/{interviewId}
     * @allow (create) Authenticated user creates an interview record.
     * @deny (create) Unauthenticated user attempts to create an interview record.
     * @allow (update) Authenticated user updates an interview record.
     * @deny (update) Unauthenticated user attempts to update an interview record.
     * @allow (delete) Authenticated user deletes an interview record.
     * @deny (delete) Unauthenticated user attempts to delete an interview record.
     * @principle Enforces authentication for all write operations.
     */
    match /interviews/{interviewId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to caregiver employee records. Only authenticated users can create, update, or delete employee records.
     * @path /caregiver_employees/{employeeId}
     * @allow (create) Authenticated user creates a caregiver employee record.
     * @deny (create) Unauthenticated user attempts to create a caregiver employee record.
     * @allow (update) Authenticated user updates a caregiver employee record.
     * @deny (update) Unauthenticated user attempts to update a caregiver employee record.
     * @allow (delete) Authenticated user deletes a caregiver employee record.
     * @deny (delete) Unauthenticated user attempts to delete a caregiver employee record.
     * @principle Enforces authentication for all write operations.
     */
    match /caregiver_employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}